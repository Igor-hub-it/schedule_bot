import logging
import asyncio
import sqlite3
from datetime import datetime, timedelta, date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from database import Database
from config import BOT_TOKEN, ADMIN_IDS, ALLOWED_GROUP_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

class ScheduleBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.database = Database()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("schedule", self.show_schedule))
        self.application.add_handler(CommandHandler("my_bookings", self.show_my_bookings))
        self.application.add_handler(CommandHandler("my_id", self.get_my_id))
        self.application.add_handler(CommandHandler("group_id", self.get_group_id))
        
        # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        self.application.add_handler(CommandHandler("admin", self.admin_panel))
        self.application.add_handler(CommandHandler("add_slot", self.add_slot))
        self.application.add_handler(CommandHandler("remove_slot", self.remove_slot))
        self.application.add_handler(CommandHandler("add_user", self.add_user))
        self.application.add_handler(CommandHandler("remove_user", self.remove_user))
        self.application.add_handler(CommandHandler("set_group", self.set_group))
        self.application.add_handler(CommandHandler("make_admin", self.make_admin))
        self.application.add_handler(CommandHandler("remove_admin", self.remove_admin))
        self.application.add_handler(CommandHandler("list_admins", self.list_admins))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def get_message_object(self, update: Update):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        return update.message or update.callback_query.message
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ config.py
        if user_id in ADMIN_IDS:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return self.database.get_user_role(user_id) == 'admin'
    
    def get_user_keyboard(self, user_id: int) -> ReplyKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.is_admin(user_id):
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            keyboard = [
                [KeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤")]
            ]
        else:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard = [
                [KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")]
            ]
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    async def is_user_in_group(self, user_id: int, group_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            chat_member = await self.application.bot.get_chat_member(group_id, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
            if chat_member.status in ['member', 'administrator', 'creator']:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {group_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {chat_member.status}")
                return True
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã {group_id}, —Å—Ç–∞—Ç—É—Å: {chat_member.status}")
                return False
                
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –æ—à–∏–±–∫–∞)
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def check_user_access(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        if self.database.user_exists(user_id):
            self.database.add_user(user_id, username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
        if ALLOWED_GROUP_ID and not await self.is_user_in_group(user_id, ALLOWED_GROUP_ID):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –±–∞–∑–µ, –Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã - —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if self.database.user_exists(user_id):
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                freed_slots = self.database.free_user_bookings(user_id)
                logger.info(f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {freed_slots} —Å–ª–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
                
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                self.database.remove_user(user_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
            
            await update.message.reply_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ –≥—Ä—É–ø–ø–µ.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return False
        
        return True
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, –∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö
        if update.message.chat.type != 'private':
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await self.check_user_access(update, context):
            return
            
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        if not self.database.user_exists(user_id):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
            self.database.add_user(user_id, username)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º username, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            self.database.add_user(user_id, username)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} (@{username})")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reply_keyboard = self.get_user_keyboard(user_id)
        
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=reply_keyboard
        )
    
    async def get_my_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        first_name = update.effective_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        message = f"""
üÜî **–í–∞—à ID:** `{user_id}`
üë§ **–ò–º—è:** {first_name}
üìù **Username:** @{username}

**–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:**
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID: `{user_id}`
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É

**–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
@Captain_Cobain
        """
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def get_group_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã"""
        # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —á–∞—Ç–µ (–ª–∏—á–Ω–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–µ)
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        
        if chat_type == 'private':
            message = """
‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!

**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã:**

1. **–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É** –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. **–í –≥—Ä—É–ø–ø–µ –Ω–∞–ø–∏—à–∏—Ç–µ:** `/group_id`
3. **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã** –∏–∑ –æ—Ç–≤–µ—Ç–∞
4. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä—É–ø–ø—É:** `/set_group ID_–≥—Ä—É–ø–ø—ã`

**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:**
‚Ä¢ –í–µ–±-–≤–µ—Ä—Å–∏—è Telegram: web.telegram.org
‚Ä¢ –ë–æ—Ç @RawDataBot
‚Ä¢ –ë–æ—Ç @getidsbot

**–¢–µ–∫—É—â–∏–π ID –≥—Ä—É–ø–ø—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:** `-3114498461`
            """
        else:
            # –≠—Ç–æ –≥—Ä—É–ø–ø–∞
            message = f"""
üÜî **ID –≥—Ä—É–ø–ø—ã:** `{chat_id}`
üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {update.effective_chat.title}
üë• **–¢–∏–ø:** {chat_type}

**–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID: `{chat_id}`
2. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –ª–∏—á–Ω–æ: `/set_group {chat_id}`
3. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Å—Ç—É–ø

**–¢–µ–∫—É—â–∏–π ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:** `-3114498461`
            """
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

**–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:**
‚Ä¢ `/my_id` - –ü–æ–ª—É—á–∏—Ç—å –≤–∞—à ID –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ `/group_id` - –ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)

**–î–ª—è –∫—É—Ä—Å–∞–Ω—Ç–æ–≤:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/schedule` - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
‚Ä¢ `/my_bookings` - –ú–æ–∏ –∑–∞–ø–∏—Å–∏
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**
‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ `/add_slot` - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ `/remove_slot` - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ `/add_user` - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/remove_user` - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/set_group` - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

**–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:**
1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
2. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å

**–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
        """
        message_obj = self.get_message_object(update)
        await message_obj.reply_text(help_text, parse_mode='Markdown')
    
    async def show_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await self.check_user_access(update, context):
            return
            
        user_id = update.effective_user.id
        message_obj = self.get_message_object(update)
        
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        await self.show_schedule_calendar(update, context)
    
    async def show_schedule_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year=None, month=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
        if not await self.check_user_access(update, context):
            return
            
        user_id = update.effective_user.id
        message_obj = self.get_message_object(update)
        
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if year is None or month is None:
            now = datetime.now()
            year = now.year
            month = now.month
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞ –º–µ—Å—è—Ü
        slots = self.database.get_slots_by_month(year, month)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –∑–∞ –º–µ—Å—è—Ü
        available_slots = self.database.get_available_slots_by_month(year, month)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏
        calendar_text = f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - {month:02d}.{year}**\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É
        import calendar
        cal = calendar.monthcalendar(year, month)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        calendar_text += " ".join(f"{day:>2}" for day in week_days) + "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        keyboard = []
        
        for week in cal:
            week_buttons = []
            for day in week:
                if day == 0:
                    week_buttons.append(InlineKeyboardButton(" ", callback_data="cal_empty"))
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    day_slots = [slot for slot in available_slots if slot['datetime'].day == day]
                    if day_slots:
                        button_text = f"üìÖ{day}"
                    else:
                        button_text = f"{day:2d}"
                    
                    week_buttons.append(InlineKeyboardButton(
                        button_text, 
                        callback_data=f"schedule_cal_select_{year}_{month}_{day}"
                    ))
            keyboard.append(week_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        nav_buttons = []
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        prev_month = month - 1
        prev_year = year
        if prev_month == 0:
            prev_month = 12
            prev_year -= 1
        
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"schedule_cal_prev_{prev_year}_{prev_month}"))
        
        # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_month = datetime.now().month
        current_year = datetime.now().year
        nav_buttons.append(InlineKeyboardButton(f"{month:02d}.{year}", callback_data=f"schedule_cal_current_{current_year}_{current_month}"))
        
        # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        next_month = month + 1
        next_year = year
        if next_month == 13:
            next_month = 1
            next_year += 1
        
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"schedule_cal_next_{next_year}_{next_month}"))
        
        keyboard.append(nav_buttons)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    calendar_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await message_obj.reply_text(
                    calendar_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await message_obj.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=reply_markup
            )
    
    async def show_schedule_day_slots(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year: int, month: int, day: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å"""
        if not await self.check_user_access(update, context):
            return
            
        user_id = update.effective_user.id
        message_obj = self.get_message_object(update)
        

        selected_date = date(year, month, day)
        date_str = selected_date.strftime('%d.%m.%Y')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        available_slots = self.database.get_available_slots_by_day(year, month, day)
        
        message_text = f"üìÖ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {date_str}:**\n\n"
        
        if available_slots:
            message_text += "**–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:**\n"
            keyboard = []
            
            for slot in available_slots:
                time_str = slot['datetime'].strftime('%H:%M')
                message_text += f"‚Ä¢ {time_str} - {slot['description']}\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
                keyboard.append([InlineKeyboardButton(
                    f"üìÖ {time_str} - {slot['description']}",
                    callback_data=f"book_{slot['id']}"
                )])
        else:
            message_text += "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n"
            keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data=f"schedule_calendar_{year}_{month}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–æ—Ç–æ–≤ –¥–Ω—è {date_str}: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=reply_markup
            )
    
    async def show_my_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await self.check_user_access(update, context):
            return
            
        user_id = update.effective_user.id
        message_obj = self.get_message_object(update)
        
        
        bookings = self.database.get_user_bookings(user_id)
        
        if not bookings:
            await message_obj.reply_text("üìã –£ –≤–∞—Å –Ω–µ—Ç –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.\n\n–í—Å–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏ —Å–∫—Ä—ã—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        
        message = "üìã **–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:**\n\n"
        keyboard = []
        
        for booking in bookings:
            date_str = booking['datetime'].strftime('%d.%m.%Y %H:%M')
            message += f"üìÖ {date_str}\n"
            message += f"üìù {booking['description']}\n\n"
            
            keyboard.append([InlineKeyboardButton(
                f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {date_str}",
                callback_data=f"cancel_{booking['id']}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message_obj.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_user_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year=None, month=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        message_obj = self.get_message_object(update)
        
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if year is None or month is None:
            now = datetime.now()
            year = now.year
            month = now.month
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞ –º–µ—Å—è—Ü
        slots = self.database.get_slots_by_month(year, month)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –º–µ—Å—è—Ü
        user_bookings = self.database.get_user_bookings_by_month(user_id, year, month)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏
        calendar_text = f"üìÖ **–ú–æ–∏ –∑–∞–ø–∏—Å–∏ - {month:02d}.{year}**\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É
        import calendar
        cal = calendar.monthcalendar(year, month)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        calendar_text += " ".join(f"{day:>2}" for day in week_days) + "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        keyboard = []
        
        for week in cal:
            week_buttons = []
            for day in week:
                if day == 0:
                    week_buttons.append(InlineKeyboardButton(" ", callback_data="cal_empty"))
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    day_bookings = [booking for booking in user_bookings if booking['datetime'].day == day]
                    if day_bookings:
                        button_text = f"üìÖ{day}"
                    else:
                        button_text = f"{day:2d}"
                    
                    week_buttons.append(InlineKeyboardButton(
                        button_text, 
                        callback_data=f"user_cal_select_{year}_{month}_{day}"
                    ))
            keyboard.append(week_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        nav_buttons = []
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        prev_month = month - 1
        prev_year = year
        if prev_month == 0:
            prev_month = 12
            prev_year -= 1
        
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"user_cal_prev_{prev_year}_{prev_month}"))
        
        # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_month = datetime.now().month
        current_year = datetime.now().year
        nav_buttons.append(InlineKeyboardButton(f"{month:02d}.{year}", callback_data=f"user_cal_current_{current_year}_{current_month}"))
        
        # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        next_month = month + 1
        next_year = year
        if next_month == 13:
            next_month = 1
            next_year += 1
        
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"user_cal_next_{next_year}_{next_month}"))
        
        keyboard.append(nav_buttons)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    calendar_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await message_obj.reply_text(
                    calendar_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message_obj.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=reply_markup
            )
    
    async def show_user_day_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year: int, month: int, day: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å"""
        user_id = update.effective_user.id
        message_obj = self.get_message_object(update)
        

        selected_date = date(year, month, day)
        date_str = selected_date.strftime('%d.%m.%Y')
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        user_bookings = self.database.get_user_bookings_by_day(user_id, year, month, day)
        
        message_text = f"üìÖ **–ú–æ–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ {date_str}:**\n\n"
        
        if user_bookings:
            message_text += "**–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:**\n"
            for booking in user_bookings:
                time_str = booking['datetime'].strftime('%H:%M')
                message_text += f"‚Ä¢ {time_str} - {booking['description']}\n"
        else:
            message_text += "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data=f"user_calendar_{year}_{month}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–ø–∏—Å–µ–π –¥–Ω—è {date_str}: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=reply_markup
            )
    
    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤", callback_data="admin_calendar")],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üìÖ –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="admin_all_bookings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_admin_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year=None, month=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if year is None or month is None:
            now = datetime.now()
            year = now.year
            month = now.month
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞ –º–µ—Å—è—Ü
        slots = self.database.get_slots_by_month(year, month)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏
        calendar_text = f"üìÖ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤ - {month:02d}.{year}**\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É
        import calendar
        cal = calendar.monthcalendar(year, month)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        calendar_text += " ".join(f"{day:>2}" for day in week_days) + "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        keyboard = []
        
        for week in cal:
            week_buttons = []
            for day in week:
                if day == 0:
                    week_buttons.append(InlineKeyboardButton(" ", callback_data="cal_empty"))
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    day_slots = [slot for slot in slots if slot[1].day == day]
                    if day_slots:
                        button_text = f"üìÖ{day}"
                    else:
                        button_text = f"{day:2d}"
                    
                    week_buttons.append(InlineKeyboardButton(
                        button_text, 
                        callback_data=f"cal_select_{year}_{month}_{day}"
                    ))
            keyboard.append(week_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        prev_month = month - 1 if month > 1 else 12
        prev_year = year if month > 1 else year - 1
        next_month = month + 1 if month < 12 else 1
        next_year = year if month < 12 else year + 1
        
        nav_buttons = [
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"cal_prev_{prev_year}_{prev_month}"),
            InlineKeyboardButton(f"{month:02d}.{year}", callback_data="cal_current"),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f"cal_next_{next_year}_{next_month}")
        ]
        keyboard.append(nav_buttons)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            await update.callback_query.edit_message_text(
                calendar_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                calendar_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def show_day_slots(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year: int, month: int, day: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –∑–∞ –¥–µ–Ω—å
        target_date = date(year, month, day)
        slots = self.database.get_slots_by_month(year, month)
        day_slots = [slot for slot in slots if slot[1].date() == target_date]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"üìÖ **–°–ª–æ—Ç—ã –Ω–∞ {day:02d}.{month:02d}.{year}**\n\n"
        
        if day_slots:
            message_text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:**\n"
            for slot in day_slots:
                slot_id = slot[0]
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç
                bookings = self.database.get_bookings_by_slot(slot_id)
                active_bookings = bookings  # –í—Å–µ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å time_slots
                
                message_text += f"‚Ä¢ {slot[1].strftime('%H:%M')} - {slot[2]}\n"
                
                if active_bookings:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º username –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    username = active_bookings[0][5] or f"ID:{active_bookings[0][4]}"
                    # –î–æ–±–∞–≤–ª—è–µ–º @ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                    if username.startswith('@'):
                        username_escaped = username.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
                    else:
                        username_escaped = f"@{username}".replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
                    message_text += f"  –ó–∞–ø–∏—Å–∞–Ω: {username_escaped}\n"
                else:
                    message_text += f"  –°–≤–æ–±–æ–¥–µ–Ω\n"
        else:
            message_text += "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞–º–∏
        action_buttons = [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data=f"add_slot_{year}_{month}_{day}")]
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ—Ç—ã
        if slots:
            action_buttons.append(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç", callback_data=f"remove_slot_{year}_{month}_{day}"))
        
        keyboard.append(action_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        back_button = [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data=f"cal_prev_{year}_{month}")]
        keyboard.append(back_button)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_remove_slot_selector(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year: int, month: int, day: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –∑–∞ –¥–µ–Ω—å
        target_date = date(year, month, day)
        slots = self.database.get_slots_by_month(year, month)
        day_slots = [slot for slot in slots if slot[1].date() == target_date]
        
        if not day_slots:
            await update.callback_query.answer("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ {day:02d}.{month:02d}.{year}**\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
        keyboard = []
        for slot in day_slots:
            slot_text = f"{slot[1].strftime('%H:%M')} - {slot[2]}"
            if slot[3] > 0:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏
                slot_text += f" (‚ö†Ô∏è {slot[3]} –∑–∞–ø–∏—Å–µ–π)"
            
            keyboard.append([InlineKeyboardButton(
                slot_text, 
                callback_data=f"delete_slot_{slot[0]}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_button = [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cal_select_{year}_{month}_{day}")]
        keyboard.append(back_button)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_date_selector(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–∞—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        now = datetime.now()
        current_year = now.year
        current_month = now.month
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        calendar_text = f"üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞**\n\n"
        calendar_text += f"**{current_month:02d}.{current_year}**\n"
        calendar_text += "–ü–Ω –í—Ç –°—Ä –ß—Ç –ü—Ç –°–± –í—Å\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        first_day = date(current_year, current_month, 1)
        last_day = date(current_year, current_month + 1, 1) - timedelta(days=1) if current_month < 12 else date(current_year + 1, 1, 1) - timedelta(days=1)
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è (0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        start_weekday = first_day.weekday()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = []
        current_row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        for _ in range(start_weekday):
            current_row.append(InlineKeyboardButton(" ", callback_data="cal_empty"))
        
        for day in range(1, last_day.day + 1):
            current_date = date(current_year, current_month, day)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∞—è –ª–∏ —ç—Ç–æ –¥–∞—Ç–∞
            if current_date >= now.date():
                button_text = f"{day:2d}"
                callback_data = f"cal_select_{current_year}_{current_month}_{day}"
            else:
                button_text = f" {day:2d} "
                callback_data = "cal_empty"
            
            current_row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π
            if len(current_row) == 7:
                keyboard.append(current_row)
                current_row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if current_row:
            # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            while len(current_row) < 7:
                current_row.append(InlineKeyboardButton(" ", callback_data="cal_empty"))
            keyboard.append(current_row)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        prev_month = current_month - 1 if current_month > 1 else 12
        prev_year = current_year if current_month > 1 else current_year - 1
        next_month = current_month + 1 if current_month < 12 else 1
        next_year = current_year if current_month < 12 else current_year + 1
        
        nav_buttons = [
            InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"cal_prev_{prev_year}_{prev_month}"),
            InlineKeyboardButton(f"{current_month:02d}.{current_year}", callback_data="cal_current"),
            InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"cal_next_{next_year}_{next_month}")
        ]
        keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="admin_calendar")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            calendar_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_time_selector(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year, month, day):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        selected_date = date(year, month, day)
        date_str = selected_date.strftime('%d.%m.%Y')
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        keyboard = []
        
        # –ü–Ω-–ü—Ç: 8:00, 9:30, 11:00, 12:30, 14:00, 15:30, 17:00, 18:30
        workday_times = ["08:00", "09:30", "11:00", "12:30", "14:00", "15:30", "17:00", "18:30"]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 4 –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        for i in range(0, len(workday_times), 4):
            time_buttons = []
            for time in workday_times[i:i+4]:
                time_buttons.append(InlineKeyboardButton(time, callback_data=f"time_select_{year}_{month}_{day}_{time}"))
            keyboard.append(time_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        keyboard.append([InlineKeyboardButton("üïê –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data=f"custom_time_{year}_{month}_{day}")])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="cal_add_slot")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"üïê **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date_str}**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Ä–µ–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è' –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    
    async def show_custom_time_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year, month, day):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        selected_date = date(year, month, day)
        date_str = selected_date.strftime('%d.%m.%Y')
        
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['pending_time'] = {
            'year': year,
            'month': month,
            'day': day,
            'date_str': date_str
        }
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", callback_data=f"cal_select_{year}_{month}_{day}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cal_select_{year}_{month}_{day}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"üïê **–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date_str}**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30\n\n"
            "**–î–ª—è –æ—Ç–º–µ–Ω—ã:** –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def create_slot_from_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year, month, day, time, description):
        """–°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            message_obj = self.get_message_object(update)
            await message_obj.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç
            slot_datetime = datetime(
                year,
                month,
                day,
                int(time.split(':')[0]),
                int(time.split(':')[1])
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
            if slot_datetime <= datetime.now():
                message_obj = self.get_message_object(update)
                if update.callback_query:
                    await update.callback_query.edit_message_text(
                        "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç –≤ –ø—Ä–æ—à–ª–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
                        parse_mode='Markdown'
                    )
                else:
                    await message_obj.reply_text(
                        "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç –≤ –ø—Ä–æ—à–ª–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
                        parse_mode='Markdown'
                    )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–ª–æ—Ç–∞ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
            existing_slots = self.database.get_slots_by_month(year, month)
            for slot in existing_slots:
                if slot[1] == slot_datetime:
                    date_str = date(year, month, day).strftime('%d.%m.%Y')
                    message_obj = self.get_message_object(update)
                    if update.callback_query:
                        await update.callback_query.edit_message_text(
                            f"‚ùå **–°–ª–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!**\n\n"
                            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                            f"üïê –í—Ä–µ–º—è: {time}\n\n"
                            f"–ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –µ—Å—Ç—å —Å–ª–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
                            parse_mode='Markdown'
                        )
                    else:
                        await message_obj.reply_text(
                            f"‚ùå **–°–ª–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!**\n\n"
                            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                            f"üïê –í—Ä–µ–º—è: {time}\n\n"
                            f"–ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –µ—Å—Ç—å —Å–ª–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
                            parse_mode='Markdown'
                        )
                    return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            slot_id = self.database.add_slot(slot_datetime, description)
            
            if slot_id:
                date_str = date(year, month, day).strftime('%d.%m.%Y')
                message_obj = self.get_message_object(update)
                if update.callback_query:
                    await update.callback_query.edit_message_text(
                        f"‚úÖ **–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n"
                        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                        f"üïê –í—Ä–µ–º—è: {time}\n\n"
                        "–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏.",
                        parse_mode='Markdown'
                    )
                else:
                    await message_obj.reply_text(
                        f"‚úÖ **–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n"
                        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                        f"üïê –í—Ä–µ–º—è: {time}\n\n"
                        "–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏.",
                        parse_mode='Markdown'
                    )
            else:
                message_obj = self.get_message_object(update)
                if update.callback_query:
                    await update.callback_query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        parse_mode='Markdown'
                    )
                else:
                    await message_obj.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        parse_mode='Markdown'
                    )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞: {e}")
            message_obj = self.get_message_object(update)
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode='Markdown'
                )
            else:
                await message_obj.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode='Markdown'
                )
    
    async def show_slot_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, slot_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–ª–æ—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ
            slots = self.database.get_all_slots()
            slot_info = None
            
            for slot in slots:
                if slot[0] == slot_id:  # slot[0] - —ç—Ç–æ ID
                    slot_info = slot
                    break
            
            if not slot_info:
                await update.callback_query.answer("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            slot_id, slot_datetime, description = slot_info
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç
            bookings = self.database.get_bookings_by_slot(slot_id)
            active_bookings = bookings  # –í—Å–µ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å time_slots
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            date_str = slot_datetime.strftime("%d.%m.%Y")
            time_str = slot_datetime.strftime("%H:%M")
            
            text = f"üìÖ **–î–µ—Ç–∞–ª–∏ —Å–ª–æ—Ç–∞**\n\n"
            text += f"üìÜ **–î–∞—Ç–∞:** {date_str}\n"
            text += f"üïê **–í—Ä–µ–º—è:** {time_str}\n"
            text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n"
            text += f"üë• **–ó–∞–ø–∏—Å–µ–π:** {len(active_bookings)}\n\n"
            
            if len(active_bookings) > 0:
                text += "‚ö†Ô∏è **–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏!**\n"
                text += "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç."
            else:
                text += "‚úÖ **–°–ª–æ—Ç –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å**"
            
            keyboard = []
            
            if len(active_bookings) == 0:
                keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç", callback_data=f"delete_slot_{slot_id}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="admin_calendar")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π —Å–ª–æ—Ç–∞: {e}")
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ—Ç–∞.")
    
    async def delete_slot_from_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE, slot_id: int):
        """–£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            success, message = self.database.delete_slot(slot_id)
            
            if success:
                await update.callback_query.answer("‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
                await self.show_admin_calendar(update, context)
            else:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                if "–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏" in message:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    keyboard = [
                        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ", callback_data=f"force_delete_{slot_id}")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_calendar")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.callback_query.edit_message_text(
                        f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ**\n\n"
                        f"–ù–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏.\n\n"
                        f"–ü—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏:\n"
                        f"‚Ä¢ –°–ª–æ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω\n"
                        f"‚Ä¢ –í—Å–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã\n"
                        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
                        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                else:
                    await update.callback_query.answer(f"‚ùå {message}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞: {e}")
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞.")
    
    async def force_delete_slot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, slot_id: int):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–ª–æ—Ç
            success, message, affected_users = self.database.force_delete_slot(slot_id)
            
            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if affected_users:
                    for user_id_affected, username in affected_users:
                        try:
                            await self.application.bot.send_message(
                                chat_id=user_id_affected,
                                text="‚ö†Ô∏è **–í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
                                     "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª —Å–ª–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã.\n"
                                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.",
                                parse_mode='Markdown'
                            )
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_affected}: {e}")
                
                await update.callback_query.edit_message_text(
                    f"‚úÖ **–°–ª–æ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω**\n\n"
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(affected_users)}",
                    parse_mode='Markdown'
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(2)
                await self.show_admin_calendar(update, context)
            else:
                await update.callback_query.answer(f"‚ùå {message}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞: {e}")
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞.")
    
    async def add_slot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∫–æ–º–∞–Ω–¥–∞)"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_slot –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –û–ø–∏—Å–∞–Ω–∏–µ\n"
                "–ü—Ä–∏–º–µ—Ä: /add_slot 25.12.2024 14:30 –ó–∞–Ω—è—Ç–∏–µ –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é"
            )
            return
        
        try:
            date_str = context.args[0]
            time_str = context.args[1]
            description = " ".join(context.args[2:]) if len(context.args) > 2 else "–ó–∞–Ω—è—Ç–∏–µ"
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            slot_datetime = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –≤ –±—É–¥—É—â–µ–º
            if slot_datetime <= datetime.now():
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –≤ –ø—Ä–æ—à–ª–æ–º.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç
            slot_id = self.database.add_slot(slot_datetime, description)
            
            await update.message.reply_text(
                f"‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"üìÖ {slot_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù {description}"
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
            )
    
    async def remove_slot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∫–æ–º–∞–Ω–¥–∞)"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Å–ª–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_slot ID_—Å–ª–æ—Ç–∞"
            )
            return
        
        try:
            slot_id = int(context.args[0])
            
            if self.database.remove_slot(slot_id):
                await update.message.reply_text(f"‚úÖ –°–ª–æ—Ç {slot_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                await update.message.reply_text(f"‚ùå –°–ª–æ—Ç —Å ID {slot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
        except ValueError:
            await update.message.reply_text("‚ùå ID —Å–ª–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    
    async def add_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥–∞)"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_user USER_ID"
            )
            return
        
        try:
            new_user_id = int(context.args[0])
            username = context.args[1] if len(context.args) > 1 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            if self.database.add_user(new_user_id, username):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    
    async def remove_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥–∞)"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_user USER_ID"
            )
            return
        
        try:
            user_to_remove = int(context.args[0])
            
            if self.database.remove_user(user_to_remove):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_remove} —É–¥–∞–ª–µ–Ω.")
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    
    async def set_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —á–∞—Ç–µ (–ª–∏—á–Ω–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–µ)
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_group GROUP_ID\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã:\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É\n"
                "2. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ: @userinfobot\n"
                "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -)"
            )
            return
        
        try:
            group_id = int(context.args[0])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            global ALLOWED_GROUP_ID
            ALLOWED_GROUP_ID = group_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
            try:
                chat_info = await context.bot.get_chat(group_id)
                await update.message.reply_text(
                    f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n"
                    f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_info.title}\n"
                    f"üÜî ID: {group_id}\n\n"
                    f"–¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
                )
            except Exception as e:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø:\n"
                    f"ID: {group_id}\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}"
                )
                
        except ValueError:
            await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –ø—Ä–∏—à–µ–ª –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, –∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö
        if query.message.chat.type != 'private':
            return
        
        data = query.data
        user_id = query.from_user.id
        
        if data == "help":
            await self.help(update, context)
        
        elif data == "show_schedule":
            await self.show_schedule(update, context)
        
        elif data == "my_bookings":
            await self.show_my_bookings(update, context)
        
        elif data.startswith("book_"):
            slot_id = int(data.split("_")[1])
            await self.book_slot(update, context, slot_id)
        
        elif data.startswith("cancel_"):
            booking_id = int(data.split("_")[1])
            await self.cancel_booking(update, context, booking_id)
        
        elif data == "admin_add_slot":
            await query.edit_message_text(
                "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/add_slot –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –û–ø–∏—Å–∞–Ω–∏–µ`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`/add_slot 25.12.2024 14:30 –ó–∞–Ω—è—Ç–∏–µ –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é`",
                parse_mode='Markdown'
            )
        
        elif data == "admin_remove_slot":
            await query.edit_message_text(
                "‚ûñ **–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/remove_slot ID_—Å–ª–æ—Ç–∞`\n\n"
                "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —Å–ª–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin",
                parse_mode='Markdown'
            )
        
        elif data == "admin_users":
            await self.show_users_management(update, context)
        
        elif data == "admin_stats":
            await self.show_stats(update, context)
        
        elif data == "admin_calendar":
            await self.show_admin_calendar(update, context)
        
        elif data.startswith("cal_prev_"):
            year, month = data.split("_")[2], int(data.split("_")[3])
            await self.show_admin_calendar(update, context, int(year), month)
        
        elif data.startswith("cal_next_"):
            year, month = data.split("_")[2], int(data.split("_")[3])
            await self.show_admin_calendar(update, context, int(year), month)
        
        elif data == "cal_add_slot":
            await self.show_date_selector(update, context)
        
        elif data.startswith("cal_select_"):
            year, month, day = data.split("_")[2], int(data.split("_")[3]), int(data.split("_")[4])
            await self.show_day_slots(update, context, int(year), month, day)
        
        elif data.startswith("add_slot_"):
            year, month, day = data.split("_")[2], int(data.split("_")[3]), int(data.split("_")[4])
            await self.show_time_selector(update, context, int(year), month, day)
        
        elif data.startswith("remove_slot_"):
            year, month, day = data.split("_")[2], int(data.split("_")[3]), int(data.split("_")[4])
            await self.show_remove_slot_selector(update, context, int(year), month, day)
        
        elif data.startswith("time_select_"):
            year, month, day, time = data.split("_")[2], int(data.split("_")[3]), int(data.split("_")[4]), data.split("_")[5]
            await self.create_slot_from_calendar(update, context, int(year), month, day, time, "–°–ª–æ—Ç")
        
        elif data.startswith("custom_time_"):
            year, month, day = data.split("_")[2], int(data.split("_")[3]), int(data.split("_")[4])
            await self.show_custom_time_input(update, context, int(year), month, day)
        
        
        elif data.startswith("slot_details_"):
            slot_id = int(data.split("_")[2])
            await self.show_slot_details(update, context, slot_id)
        
        elif data.startswith("delete_slot_"):
            slot_id = int(data.split("_")[2])
            await self.delete_slot_from_calendar(update, context, slot_id)
        
        elif data.startswith("force_delete_"):
            slot_id = int(data.split("_")[2])
            await self.force_delete_slot(update, context, slot_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        elif data.startswith("user_cal_prev_"):
            year, month = data.split("_")[2], int(data.split("_")[3])
            await self.show_user_calendar(update, context, int(year), month)
        
        elif data.startswith("user_cal_next_"):
            year, month = data.split("_")[2], int(data.split("_")[3])
            await self.show_user_calendar(update, context, int(year), month)
        
        elif data.startswith("user_cal_current_"):
            year, month = data.split("_")[2], int(data.split("_")[3])
            await self.show_user_calendar(update, context, int(year), month)
        
        elif data.startswith("user_cal_select_"):
            year, month, day = data.split("_")[3], int(data.split("_")[4]), int(data.split("_")[5])
            await self.show_user_day_bookings(update, context, int(year), month, day)
        
        elif data.startswith("user_calendar_"):
            year, month = data.split("_")[2], int(data.split("_")[3])
            await self.show_user_calendar(update, context, int(year), month)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        elif data.startswith("schedule_cal_prev_"):
            year, month = data.split("_")[3], int(data.split("_")[4])
            await self.show_schedule_calendar(update, context, int(year), month)
        
        elif data.startswith("schedule_cal_next_"):
            year, month = data.split("_")[3], int(data.split("_")[4])
            await self.show_schedule_calendar(update, context, int(year), month)
        
        elif data.startswith("schedule_cal_current_"):
            year, month = data.split("_")[3], int(data.split("_")[4])
            await self.show_schedule_calendar(update, context, int(year), month)
        
        elif data.startswith("schedule_cal_select_"):
            year, month, day = data.split("_")[3], int(data.split("_")[4]), int(data.split("_")[5])
            await self.show_schedule_day_slots(update, context, int(year), month, day)
        
        elif data.startswith("schedule_calendar_"):
            year, month = data.split("_")[2], int(data.split("_")[3])
            await self.show_schedule_calendar(update, context, int(year), month)
        
        elif data == "cal_empty":
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
            pass
        
        elif data == "admin_all_bookings":
            await self.show_all_bookings(update, context)
    
    async def book_slot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, slot_id: int):
        """–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–æ—Ç"""
        if not await self.check_user_access(update, context):
            return
            
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —Å–ª–æ—Ç
        slot = self.database.get_slot(slot_id)
        if not slot:
            await update.callback_query.edit_message_text("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if slot['is_booked']:
            await update.callback_query.edit_message_text("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤
        from datetime import timedelta
        time_until_slot = slot['datetime'] - datetime.now()
        
        if time_until_slot.total_seconds() < 24 * 3600:  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            hours_left = int(time_until_slot.total_seconds() / 3600)
            await update.callback_query.edit_message_text(
                f"‚ùå **–ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç!**\n\n"
                f"üìÖ –î–∞—Ç–∞: {slot['datetime'].strftime('%d.%m.%Y %H:%M')}\n"
                f"‚è∞ –î–æ –Ω–∞—á–∞–ª–∞: {hours_left} —á–∞—Å–æ–≤\n\n"
                f"**–ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞ 24 —á–∞—Å–∞ –∏–ª–∏ –±–æ–ª–µ–µ –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è.**",
                parse_mode='Markdown'
            )
            return
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.database.book_slot(slot_id, user_id):
            await update.callback_query.edit_message_text(
                f"‚úÖ **–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!**\n\n"
                f"üìÖ {slot['datetime'].strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù {slot['description']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏\" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.",
                parse_mode='Markdown'
            )
        else:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def cancel_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE, booking_id: int):
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        if not await self.check_user_access(update, context):
            return
            
        user_id = update.effective_user.id
        
        if self.database.cancel_booking(booking_id, user_id):
            await update.callback_query.edit_message_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.")
    
    async def show_users_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        users = self.database.get_all_users()
        
        message = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
        message += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
        
        for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            message += f"üÜî {user['user_id']} - @{user['username']}\n"
        
        if len(users) > 10:
            message += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        message += "\n\n**–ö–æ–º–∞–Ω–¥—ã:**\n"
        message += "`/add_user USER_ID username` - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        message += "`/remove_user USER_ID` - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        await update.callback_query.edit_message_text(message, parse_mode='Markdown')
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.database.get_stats()
        
        message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        message += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        message += f"üìÖ –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {stats['total_slots']}\n"
        message += f"‚úÖ –ó–∞–ø–∏—Å–µ–π: {stats['total_bookings']}\n"
        message += f"üÜì –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {stats['available_slots']}\n"
        message += f"üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: {stats['occupancy_rate']:.1f}%"
        
        await update.callback_query.edit_message_text(message, parse_mode='Markdown')
    
    async def show_all_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏"""
        bookings = self.database.get_all_bookings()
        
        if not bookings:
            await update.callback_query.edit_message_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            return
        
        message = "üìã **–í—Å–µ –∑–∞–ø–∏—Å–∏**\n\n"
        
        for booking in bookings[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
            date_str = booking['datetime'].strftime('%d.%m.%Y %H:%M')
            message += f"üìÖ {date_str}\n"
            message += f"üë§ @{booking['username']} (ID: {booking['user_id']})\n"
            message += f"üìù {booking['description']}\n\n"
        
        if len(bookings) > 15:
            message += f"... –∏ –µ—â–µ {len(bookings) - 15} –∑–∞–ø–∏—Å–µ–π"
        
        await update.callback_query.edit_message_text(message, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, –∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö
        if update.message.chat.type != 'private':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            user_id = update.effective_user.id
            message_text = update.message.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if self.is_admin(user_id):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                if message_text.startswith('/set_group'):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
                    args = message_text.split()[1:] if len(message_text.split()) > 1 else []
                    context.args = args
                    await self.set_group(update, context)
                elif message_text.startswith('/make_admin'):
                    args = message_text.split()[1:] if len(message_text.split()) > 1 else []
                    context.args = args
                    await self.make_admin(update, context)
                elif message_text.startswith('/remove_admin'):
                    args = message_text.split()[1:] if len(message_text.split()) > 1 else []
                    context.args = args
                    await self.remove_admin(update, context)
                elif message_text.startswith('/list_admins'):
                    await self.list_admins(update, context)
                elif message_text.startswith('/group_id'):
                    await self.get_group_id(update, context)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await self.check_user_access(update, context):
            return
            
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ–≥–¥–∞)
        if message_text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
            if 'pending_time' in context.user_data:
                context.user_data.pop('pending_time', None)
            await self.show_schedule(update, context)
            return
        elif message_text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
            if 'pending_time' in context.user_data:
                context.user_data.pop('pending_time', None)
            await self.show_my_bookings(update, context)
            return
        elif message_text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤" and self.is_admin(user_id):
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
            if 'pending_time' in context.user_data:
                context.user_data.pop('pending_time', None)
            await self.show_admin_calendar(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
        if 'pending_time' in context.user_data:
            time_text = update.message.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
            if time_text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–æ—Ç–º–µ–Ω–∏—Ç—å', '–Ω–∞–∑–∞–¥']:
                pending_data = context.user_data['pending_time']
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏
                context.user_data.pop('pending_time', None)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
                await self.show_time_selector(update, context, 
                                            pending_data['year'], 
                                            pending_data['month'], 
                                            pending_data['day'])
                return
            
            try:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
                hour, minute = map(int, time_text.split(':'))
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    time_str = f"{hour:02d}:{minute:02d}"
                    pending_data = context.user_data['pending_time']
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç —Å—Ä–∞–∑—É
                    await self.create_slot_from_calendar(update, context, 
                                                        pending_data['year'], 
                                                        pending_data['month'], 
                                                        pending_data['day'], 
                                                        time_str, 
                                                        "–°–ª–æ—Ç")
                    
                    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏
                    context.user_data.pop('pending_time', None)
                    return
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n\n"
                        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞."
                    )
                    return
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n\n"
                    "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞."
                )
                return
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
    
    
    async def make_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —á–∞—Ç–µ (–ª–∏—á–Ω–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–µ)
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /make_admin USER_ID\n\n"
                "–ü—Ä–∏–º–µ—Ä: /make_admin 123456789"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            
            if self.database.set_user_role(target_user_id, 'admin'):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    async def remove_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —á–∞—Ç–µ (–ª–∏—á–Ω–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–µ)
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin USER_ID\n\n"
                "–ü—Ä–∏–º–µ—Ä: /remove_admin 123456789"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            
            if target_user_id == user_id:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —É —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
                return
            
            if self.database.set_user_role(target_user_id, 'user'):
                await update.message.reply_text(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É–±—Ä–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤.")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    async def list_admins(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —á–∞—Ç–µ (–ª–∏—á–Ω–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–µ)
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            with sqlite3.connect("schedule_bot.db") as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT user_id, username FROM users WHERE role = 'admin'
                """)
                admins = cursor.fetchall()
                
                if admins:
                    message = "üë• **–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n\n"
                    for admin_id, username in admins:
                        message += f"‚Ä¢ ID: {admin_id}\n"
                        if username and username != 'admin':
                            message += f"  Username: @{username}\n"
                        message += "\n"
                else:
                    message = "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                
                await update.message.reply_text(message, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

    async def periodic_group_check(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        while True:
            try:
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
                users = self.database.get_all_users()
                
                for user_id, username in users:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ
                    if not await self.is_user_in_group(user_id, ALLOWED_GROUP_ID):
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
                        
                        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç—ã
                        freed_slots = self.database.free_user_bookings(user_id)
                        logger.info(f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {freed_slots} —Å–ª–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        
                        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        self.database.remove_user(user_id)
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if ALLOWED_GROUP_ID:
            import threading
            def run_periodic_check():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.periodic_group_check())
            
            periodic_thread = threading.Thread(target=run_periodic_check, daemon=True)
            periodic_thread.start()
            logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã")
        
        self.application.run_polling(drop_pending_updates=True, allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = ScheduleBot()
    bot.run()
