import logging
import asyncio
from datetime import datetime, timedelta, date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from database import Database
from config import BOT_TOKEN, ADMIN_IDS, ALLOWED_GROUP_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

class ScheduleBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("schedule", self.show_schedule))
        self.application.add_handler(CommandHandler("my_bookings", self.show_my_bookings))
        self.application.add_handler(CommandHandler("my_id", self.get_my_id))
        self.application.add_handler(CommandHandler("group_id", self.get_group_id))
        
        # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        self.application.add_handler(CommandHandler("admin", self.admin_panel))
        self.application.add_handler(CommandHandler("add_slot", self.add_slot))
        self.application.add_handler(CommandHandler("remove_slot", self.remove_slot))
        self.application.add_handler(CommandHandler("add_user", self.add_user))
        self.application.add_handler(CommandHandler("remove_user", self.remove_user))
        self.application.add_handler(CommandHandler("set_group", self.set_group))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def get_message_object(self, update: Update):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        return update.message or update.callback_query.message
    
    def get_user_keyboard(self, user_id: int) -> ReplyKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in ADMIN_IDS:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            keyboard = [
                [KeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤")]
            ]
        else:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard = [
                [KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")]
            ]
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    async def is_user_in_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            chat_member = await context.bot.get_chat_member(ALLOWED_GROUP_ID, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
            if chat_member.status in ['member', 'administrator', 'creator']:
                return True
            else:
                return False
                
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –æ—à–∏–±–∫–∞)
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, –∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
        if update.message.chat.type != 'private':
            return
            
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        if not db.is_user_allowed(user_id):
            # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ)
            db.add_user(user_id, username)
            await update.message.reply_text(
                f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è."
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reply_keyboard = self.get_user_keyboard(user_id)
        
        await update.message.reply_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {update.effective_user.first_name}!\n\n"
            "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=reply_keyboard
        )
    
    async def get_my_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        first_name = update.effective_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        message = f"""
üÜî **–í–∞—à ID:** `{user_id}`
üë§ **–ò–º—è:** {first_name}
üìù **Username:** @{username}

**–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:**
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID: `{user_id}`
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É

**–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
@Captain_Cobain
        """
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def get_group_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã"""
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        
        if chat_type == 'private':
            message = """
‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!

**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã:**

1. **–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É** –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. **–í –≥—Ä—É–ø–ø–µ –Ω–∞–ø–∏—à–∏—Ç–µ:** `/group_id`
3. **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã** –∏–∑ –æ—Ç–≤–µ—Ç–∞
4. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä—É–ø–ø—É:** `/set_group ID_–≥—Ä—É–ø–ø—ã`

**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:**
‚Ä¢ –í–µ–±-–≤–µ—Ä—Å–∏—è Telegram: web.telegram.org
‚Ä¢ –ë–æ—Ç @RawDataBot
‚Ä¢ –ë–æ—Ç @getidsbot
            """
        else:
            # –≠—Ç–æ –≥—Ä—É–ø–ø–∞
            message = f"""
üÜî **ID –≥—Ä—É–ø–ø—ã:** `{chat_id}`
üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {update.effective_chat.title}
üë• **–¢–∏–ø:** {chat_type}

**–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID: `{chat_id}`
2. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –ª–∏—á–Ω–æ: `/set_group {chat_id}`
3. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Å—Ç—É–ø
            """
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

**–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:**
‚Ä¢ `/my_id` - –ü–æ–ª—É—á–∏—Ç—å –≤–∞—à ID –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ `/group_id` - –ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)

**–î–ª—è –∫—É—Ä—Å–∞–Ω—Ç–æ–≤:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/schedule` - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
‚Ä¢ `/my_bookings` - –ú–æ–∏ –∑–∞–ø–∏—Å–∏
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**
‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ `/add_slot` - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ `/remove_slot` - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ `/add_user` - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/remove_user` - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/set_group` - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

**–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:**
1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
2. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å

**–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
        """
        message_obj = self.get_message_object(update)
        await message_obj.reply_text(help_text, parse_mode='Markdown')
    
    async def show_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã"""
        user_id = update.effective_user.id
        message_obj = self.get_message_object(update)
        
        if not db.is_user_allowed(user_id):
            await message_obj.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        slots = db.get_available_slots()
        
        if not slots:
            await message_obj.reply_text("üìÖ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
        slots_by_date = {}
        for slot in slots:
            date_str = slot['datetime'].strftime('%d.%m.%Y')
            if date_str not in slots_by_date:
                slots_by_date[date_str] = []
            slots_by_date[date_str].append(slot)
        
        message = "üìÖ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:**\n\n"
        
        for date_str, date_slots in sorted(slots_by_date.items()):
            message += f"üìÜ **{date_str}**\n"
            for slot in date_slots:
                time_str = slot['datetime'].strftime('%H:%M')
                message += f"‚Ä¢ {time_str} - {slot['description']}\n"
            message += "\n"
        
        keyboard = []
        for slot in slots[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å–ª–æ—Ç–æ–≤
            time_str = slot['datetime'].strftime('%d.%m %H:%M')
            keyboard.append([InlineKeyboardButton(
                f"üìÖ {time_str}",
                callback_data=f"book_{slot['id']}"
            )])
        
        if len(slots) > 10:
            keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="show_more")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message_obj.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_my_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        message_obj = self.get_message_object(update)
        
        if not db.is_user_allowed(user_id):
            await message_obj.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        bookings = db.get_user_bookings(user_id)
        
        if not bookings:
            await message_obj.reply_text("üìã –£ –≤–∞—Å –Ω–µ—Ç –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.\n\n–í—Å–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏ —Å–∫—Ä—ã—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        
        message = "üìã **–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:**\n\n"
        keyboard = []
        
        for booking in bookings:
            date_str = booking['datetime'].strftime('%d.%m.%Y %H:%M')
            message += f"üìÖ {date_str}\n"
            message += f"üìù {booking['description']}\n\n"
            
            keyboard.append([InlineKeyboardButton(
                f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {date_str}",
                callback_data=f"cancel_{booking['id']}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message_obj.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤", callback_data="admin_calendar")],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üìÖ –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="admin_all_bookings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_admin_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year=None, month=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if year is None or month is None:
            now = datetime.now()
            year = now.year
            month = now.month
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞ –º–µ—Å—è—Ü
        slots = db.get_slots_by_month(year, month)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏
        calendar_text = f"üìÖ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤ - {month:02d}.{year}**\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É
        import calendar
        cal = calendar.monthcalendar(year, month)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        calendar_text += " ".join(f"{day:>2}" for day in week_days) + "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        keyboard = []
        
        for week in cal:
            week_buttons = []
            for day in week:
                if day == 0:
                    week_buttons.append(InlineKeyboardButton(" ", callback_data="cal_empty"))
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    day_slots = [slot for slot in slots if slot[1].day == day]
                    if day_slots:
                        button_text = f"üìÖ{day}"
                    else:
                        button_text = f"{day:2d}"
                    
                    week_buttons.append(InlineKeyboardButton(
                        button_text, 
                        callback_data=f"cal_select_{year}_{month}_{day}"
                    ))
            keyboard.append(week_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        prev_month = month - 1 if month > 1 else 12
        prev_year = year if month > 1 else year - 1
        next_month = month + 1 if month < 12 else 1
        next_year = year if month < 12 else year + 1
        
        nav_buttons = [
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"cal_prev_{prev_year}_{prev_month}"),
            InlineKeyboardButton(f"{month:02d}.{year}", callback_data="cal_current"),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f"cal_next_{next_year}_{next_month}")
        ]
        keyboard.append(nav_buttons)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            await update.callback_query.edit_message_text(
                calendar_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                calendar_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def show_day_slots(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year: int, month: int, day: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –∑–∞ –¥–µ–Ω—å
        target_date = date(year, month, day)
        slots = db.get_slots_by_month(year, month)
        day_slots = [slot for slot in slots if slot[1].date() == target_date]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"üìÖ **–°–ª–æ—Ç—ã –Ω–∞ {day:02d}.{month:02d}.{year}**\n\n"
        
        if day_slots:
            message_text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:**\n"
            for slot in day_slots:
                slot_id = slot[0]
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç
                bookings = db.get_bookings_by_slot(slot_id)
                active_bookings = [b for b in bookings if b[4] is None]  # cancelled_at is None
                
                message_text += f"‚Ä¢ {slot[1].strftime('%H:%M')} - {slot[2]}\n"
                
                if active_bookings:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º username –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    username = active_bookings[0][5] or active_bookings[0][6] or f"ID:{active_bookings[0][1]}"
                    # –î–æ–±–∞–≤–ª—è–µ–º @ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                    if username.startswith('@'):
                        username_escaped = username.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
                    else:
                        username_escaped = f"@{username}".replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
                    message_text += f"  –ó–∞–ø–∏—Å–∞–Ω: {username_escaped}\n"
                else:
                    message_text += f"  –°–≤–æ–±–æ–¥–µ–Ω\n"
        else:
            message_text += "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞–º–∏
        action_buttons = [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data=f"add_slot_{year}_{month}_{day}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç", callback_data=f"remove_slot_{year}_{month}_{day}")
        ]
        keyboard.append(action_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        back_button = [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data=f"cal_prev_{year}_{month}")]
        keyboard.append(back_button)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_remove_slot_selector(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year: int, month: int, day: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –∑–∞ –¥–µ–Ω—å
        target_date = date(year, month, day)
        slots = db.get_slots_by_month(year, month)
        day_slots = [slot for slot in slots if slot[1].date() == target_date]
        
        if not day_slots:
            await update.callback_query.answer("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ {day:02d}.{month:02d}.{year}**\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
        keyboard = []
        for slot in day_slots:
            slot_text = f"{slot[1].strftime('%H:%M')} - {slot[2]}"
            if slot[3] > 0:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏
                slot_text += f" (‚ö†Ô∏è {slot[3]} –∑–∞–ø–∏—Å–µ–π)"
            
            keyboard.append([InlineKeyboardButton(
                slot_text, 
                callback_data=f"delete_slot_{slot[0]}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_button = [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cal_select_{year}_{month}_{day}")]
        keyboard.append(back_button)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_date_selector(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–∞—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        now = datetime.now()
        current_year = now.year
        current_month = now.month
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        calendar_text = f"üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞**\n\n"
        calendar_text += f"**{current_month:02d}.{current_year}**\n"
        calendar_text += "–ü–Ω –í—Ç –°—Ä –ß—Ç –ü—Ç –°–± –í—Å\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        first_day = date(current_year, current_month, 1)
        last_day = date(current_year, current_month + 1, 1) - timedelta(days=1) if current_month < 12 else date(current_year + 1, 1, 1) - timedelta(days=1)
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è (0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        start_weekday = first_day.weekday()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = []
        current_row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        for _ in range(start_weekday):
            current_row.append(InlineKeyboardButton(" ", callback_data="cal_empty"))
        
        for day in range(1, last_day.day + 1):
            current_date = date(current_year, current_month, day)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∞—è –ª–∏ —ç—Ç–æ –¥–∞—Ç–∞
            if current_date >= now.date():
                button_text = f"{day:2d}"
                callback_data = f"cal_select_{current_year}_{current_month}_{day}"
            else:
                button_text = f" {day:2d} "
                callback_data = "cal_empty"
            
            current_row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π
            if len(current_row) == 7:
                keyboard.append(current_row)
                current_row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if current_row:
            # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            while len(current_row) < 7:
                current_row.append(InlineKeyboardButton(" ", callback_data="cal_empty"))
            keyboard.append(current_row)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        prev_month = current_month - 1 if current_month > 1 else 12
        prev_year = current_year if current_month > 1 else current_year - 1
        next_month = current_month + 1 if current_month < 12 else 1
        next_year = current_year if current_month < 12 else current_year + 1
        
        nav_buttons = [
            InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"cal_prev_{prev_year}_{prev_month}"),
            InlineKeyboardButton(f"{current_month:02d}.{current_year}", callback_data="cal_current"),
            InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"cal_next_{next_year}_{next_month}")
        ]
        keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="admin_calendar")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            calendar_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_time_selector(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year, month, day):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        selected_date = date(year, month, day)
        date_str = selected_date.strftime('%d.%m.%Y')
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏
        keyboard = []
        
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã
        morning_times = ["08:00", "09:00", "10:00", "11:00", "12:00"]
        morning_buttons = []
        for time in morning_times:
            morning_buttons.append(InlineKeyboardButton(time, callback_data=f"time_select_{year}_{month}_{day}_{time}"))
        keyboard.append(morning_buttons)
        
        # –î–Ω–µ–≤–Ω—ã–µ —á–∞—Å—ã
        afternoon_times = ["13:00", "14:00", "15:00", "16:00", "17:00"]
        afternoon_buttons = []
        for time in afternoon_times:
            afternoon_buttons.append(InlineKeyboardButton(time, callback_data=f"time_select_{year}_{month}_{day}_{time}"))
        keyboard.append(afternoon_buttons)
        
        # –í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã
        evening_times = ["18:00", "19:00", "20:00"]
        evening_buttons = []
        for time in evening_times:
            evening_buttons.append(InlineKeyboardButton(time, callback_data=f"time_select_{year}_{month}_{day}_{time}"))
        keyboard.append(evening_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        keyboard.append([InlineKeyboardButton("üïê –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data=f"custom_time_{year}_{month}_{day}")])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="cal_add_slot")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"üïê **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date_str}**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Ä–µ–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è' –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    
    async def show_custom_time_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year, month, day):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        selected_date = date(year, month, day)
        date_str = selected_date.strftime('%d.%m.%Y')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['pending_time'] = {
            'year': year,
            'month': month,
            'day': day,
            'date_str': date_str
        }
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", callback_data=f"cal_select_{year}_{month}_{day}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"üïê **–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date_str}**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def create_slot_from_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year, month, day, time, description):
        """–°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç
            slot_datetime = datetime(
                year,
                month,
                day,
                int(time.split(':')[0]),
                int(time.split(':')[1])
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
            if slot_datetime <= datetime.now():
                await update.callback_query.edit_message_text(
                    "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç –≤ –ø—Ä–æ—à–ª–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
                    parse_mode='Markdown'
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–ª–æ—Ç–∞ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
            existing_slots = db.get_slots_by_month(year, month)
            for slot in existing_slots:
                if slot[1] == slot_datetime:
                    date_str = date(year, month, day).strftime('%d.%m.%Y')
                    await update.callback_query.edit_message_text(
                        f"‚ùå **–°–ª–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!**\n\n"
                        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                        f"üïê –í—Ä–µ–º—è: {time}\n\n"
                        f"–ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –µ—Å—Ç—å —Å–ª–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
                        parse_mode='Markdown'
                    )
                    return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            slot_id = db.add_slot(slot_datetime, description)
            
            if slot_id:
                date_str = date(year, month, day).strftime('%d.%m.%Y')
                await update.callback_query.edit_message_text(
                    f"‚úÖ **–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n"
                    f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                    f"üïê –í—Ä–µ–º—è: {time}\n\n"
                    "–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏.",
                    parse_mode='Markdown'
                )
            else:
                await update.callback_query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode='Markdown'
            )
    
    async def show_slot_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, slot_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–ª–æ—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ
            slots = db.get_all_slots()
            slot_info = None
            
            for slot in slots:
                if slot[0] == slot_id:  # slot[0] - —ç—Ç–æ ID
                    slot_info = slot
                    break
            
            if not slot_info:
                await update.callback_query.answer("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            slot_id, slot_datetime, description = slot_info
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç
            bookings = db.get_bookings_by_slot(slot_id)
            active_bookings = [b for b in bookings if b[4] is None]  # cancelled_at is None
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            date_str = slot_datetime.strftime("%d.%m.%Y")
            time_str = slot_datetime.strftime("%H:%M")
            
            text = f"üìÖ **–î–µ—Ç–∞–ª–∏ —Å–ª–æ—Ç–∞**\n\n"
            text += f"üìÜ **–î–∞—Ç–∞:** {date_str}\n"
            text += f"üïê **–í—Ä–µ–º—è:** {time_str}\n"
            text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n"
            text += f"üë• **–ó–∞–ø–∏—Å–µ–π:** {len(active_bookings)}\n\n"
            
            if len(active_bookings) > 0:
                text += "‚ö†Ô∏è **–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏!**\n"
                text += "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç."
            else:
                text += "‚úÖ **–°–ª–æ—Ç –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å**"
            
            keyboard = []
            
            if len(active_bookings) == 0:
                keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç", callback_data=f"delete_slot_{slot_id}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="admin_calendar")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π —Å–ª–æ—Ç–∞: {e}")
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ—Ç–∞.")
    
    async def delete_slot_from_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE, slot_id: int):
        """–£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç
            success, message = db.delete_slot(slot_id)
            
            if success:
                await update.callback_query.answer("‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
                await self.show_admin_calendar(update, context)
            else:
                await update.callback_query.answer(f"‚ùå {message}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞: {e}")
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞.")
    
    async def add_slot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∫–æ–º–∞–Ω–¥–∞)"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_slot –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –û–ø–∏—Å–∞–Ω–∏–µ\n"
                "–ü—Ä–∏–º–µ—Ä: /add_slot 25.12.2024 14:30 –ó–∞–Ω—è—Ç–∏–µ –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é"
            )
            return
        
        try:
            date_str = context.args[0]
            time_str = context.args[1]
            description = " ".join(context.args[2:]) if len(context.args) > 2 else "–ó–∞–Ω—è—Ç–∏–µ"
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            slot_datetime = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –≤ –±—É–¥—É—â–µ–º
            if slot_datetime <= datetime.now():
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –≤ –ø—Ä–æ—à–ª–æ–º.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç
            slot_id = db.add_slot(slot_datetime, description)
            
            await update.message.reply_text(
                f"‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"üìÖ {slot_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù {description}"
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
            )
    
    async def remove_slot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∫–æ–º–∞–Ω–¥–∞)"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Å–ª–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_slot ID_—Å–ª–æ—Ç–∞"
            )
            return
        
        try:
            slot_id = int(context.args[0])
            
            if db.remove_slot(slot_id):
                await update.message.reply_text(f"‚úÖ –°–ª–æ—Ç {slot_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                await update.message.reply_text(f"‚ùå –°–ª–æ—Ç —Å ID {slot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
        except ValueError:
            await update.message.reply_text("‚ùå ID —Å–ª–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    
    async def add_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥–∞)"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_user USER_ID"
            )
            return
        
        try:
            new_user_id = int(context.args[0])
            username = context.args[1] if len(context.args) > 1 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            if db.add_user(new_user_id, username):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    
    async def remove_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥–∞)"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_user USER_ID"
            )
            return
        
        try:
            user_to_remove = int(context.args[0])
            
            if db.remove_user(user_to_remove):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_remove} —É–¥–∞–ª–µ–Ω.")
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    
    async def set_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_group GROUP_ID\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã:\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É\n"
                "2. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ: @userinfobot\n"
                "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -)"
            )
            return
        
        try:
            group_id = int(context.args[0])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            global ALLOWED_GROUP_ID
            ALLOWED_GROUP_ID = group_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
            try:
                chat_info = await context.bot.get_chat(group_id)
                await update.message.reply_text(
                    f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n"
                    f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_info.title}\n"
                    f"üÜî ID: {group_id}\n\n"
                    f"–¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
                )
            except Exception as e:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø:\n"
                    f"ID: {group_id}\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}"
                )
                
        except ValueError:
            await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –ø—Ä–∏—à–µ–ª –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, –∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
        if query.message.chat.type != 'private':
            return
        
        data = query.data
        user_id = query.from_user.id
        
        if data == "help":
            await self.help(update, context)
        
        elif data == "show_schedule":
            await self.show_schedule(update, context)
        
        elif data == "my_bookings":
            await self.show_my_bookings(update, context)
        
        elif data.startswith("book_"):
            slot_id = int(data.split("_")[1])
            await self.book_slot(update, context, slot_id)
        
        elif data.startswith("cancel_"):
            booking_id = int(data.split("_")[1])
            await self.cancel_booking(update, context, booking_id)
        
        elif data == "admin_add_slot":
            await query.edit_message_text(
                "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/add_slot –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –û–ø–∏—Å–∞–Ω–∏–µ`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`/add_slot 25.12.2024 14:30 –ó–∞–Ω—è—Ç–∏–µ –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é`",
                parse_mode='Markdown'
            )
        
        elif data == "admin_remove_slot":
            await query.edit_message_text(
                "‚ûñ **–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/remove_slot ID_—Å–ª–æ—Ç–∞`\n\n"
                "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —Å–ª–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin",
                parse_mode='Markdown'
            )
        
        elif data == "admin_users":
            await self.show_users_management(update, context)
        
        elif data == "admin_stats":
            await self.show_stats(update, context)
        
        elif data == "admin_calendar":
            await self.show_admin_calendar(update, context)
        
        elif data.startswith("cal_prev_"):
            year, month = data.split("_")[2], int(data.split("_")[3])
            await self.show_admin_calendar(update, context, int(year), month)
        
        elif data.startswith("cal_next_"):
            year, month = data.split("_")[2], int(data.split("_")[3])
            await self.show_admin_calendar(update, context, int(year), month)
        
        elif data == "cal_add_slot":
            await self.show_date_selector(update, context)
        
        elif data.startswith("cal_select_"):
            year, month, day = data.split("_")[2], int(data.split("_")[3]), int(data.split("_")[4])
            await self.show_day_slots(update, context, int(year), month, day)
        
        elif data.startswith("add_slot_"):
            year, month, day = data.split("_")[2], int(data.split("_")[3]), int(data.split("_")[4])
            await self.show_time_selector(update, context, int(year), month, day)
        
        elif data.startswith("remove_slot_"):
            year, month, day = data.split("_")[2], int(data.split("_")[3]), int(data.split("_")[4])
            await self.show_remove_slot_selector(update, context, int(year), month, day)
        
        elif data.startswith("time_select_"):
            year, month, day, time = data.split("_")[2], int(data.split("_")[3]), int(data.split("_")[4]), data.split("_")[5]
            await self.create_slot_from_calendar(update, context, int(year), month, day, time, "–°–ª–æ—Ç")
        
        elif data.startswith("custom_time_"):
            year, month, day = data.split("_")[2], int(data.split("_")[3]), int(data.split("_")[4])
            await self.show_custom_time_input(update, context, int(year), month, day)
        
        
        elif data.startswith("slot_details_"):
            slot_id = int(data.split("_")[2])
            await self.show_slot_details(update, context, slot_id)
        
        elif data.startswith("delete_slot_"):
            slot_id = int(data.split("_")[2])
            await self.delete_slot_from_calendar(update, context, slot_id)
        
        elif data == "cal_empty":
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
            pass
        
        elif data == "admin_all_bookings":
            await self.show_all_bookings(update, context)
    
    async def book_slot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, slot_id: int):
        """–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–æ—Ç"""
        user_id = update.effective_user.id
        
        if not db.is_user_allowed(user_id):
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —Å–ª–æ—Ç
        slot = db.get_slot(slot_id)
        if not slot:
            await update.callback_query.edit_message_text("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if slot['is_booked']:
            await update.callback_query.edit_message_text("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç.")
            return
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if db.book_slot(slot_id, user_id):
            await update.callback_query.edit_message_text(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!\n\n"
                f"üìÖ {slot['datetime'].strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù {slot['description']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_bookings –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π."
            )
        else:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def cancel_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE, booking_id: int):
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        user_id = update.effective_user.id
        
        if db.cancel_booking(booking_id, user_id):
            await update.callback_query.edit_message_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.")
    
    async def show_users_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        users = db.get_all_users()
        
        message = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
        message += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
        
        for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            message += f"üÜî {user['user_id']} - @{user['username']}\n"
        
        if len(users) > 10:
            message += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        message += "\n\n**–ö–æ–º–∞–Ω–¥—ã:**\n"
        message += "`/add_user USER_ID username` - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        message += "`/remove_user USER_ID` - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        await update.callback_query.edit_message_text(message, parse_mode='Markdown')
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = db.get_stats()
        
        message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        message += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        message += f"üìÖ –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {stats['total_slots']}\n"
        message += f"‚úÖ –ó–∞–ø–∏—Å–µ–π: {stats['total_bookings']}\n"
        message += f"üÜì –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {stats['available_slots']}\n"
        message += f"üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: {stats['occupancy_rate']:.1f}%"
        
        await update.callback_query.edit_message_text(message, parse_mode='Markdown')
    
    async def show_all_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏"""
        bookings = db.get_all_bookings()
        
        if not bookings:
            await update.callback_query.edit_message_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            return
        
        message = "üìã **–í—Å–µ –∑–∞–ø–∏—Å–∏**\n\n"
        
        for booking in bookings[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
            date_str = booking['datetime'].strftime('%d.%m.%Y %H:%M')
            message += f"üìÖ {date_str}\n"
            message += f"üë§ @{booking['username']} (ID: {booking['user_id']})\n"
            message += f"üìù {booking['description']}\n\n"
        
        if len(bookings) > 15:
            message += f"... –∏ –µ—â–µ {len(bookings) - 15} –∑–∞–ø–∏—Å–µ–π"
        
        await update.callback_query.edit_message_text(message, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, –∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
        if update.message.chat.type != 'private':
            return
            
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ—Ç–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
        if 'pending_time' in context.user_data:
            time_text = update.message.text
            try:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
                hour, minute = map(int, time_text.split(':'))
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    time_str = f"{hour:02d}:{minute:02d}"
                    pending_data = context.user_data['pending_time']
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç —Å—Ä–∞–∑—É
                    await self.create_slot_from_calendar(update, context, 
                                                        pending_data['year'], 
                                                        pending_data['month'], 
                                                        pending_data['day'], 
                                                        time_str, 
                                                        "–°–ª–æ—Ç")
                    
                    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏
                    context.user_data.pop('pending_time', None)
                    return
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)"
                    )
                    return
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)"
                )
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if message_text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            await self.show_schedule(update, context)
        elif message_text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
            await self.show_my_bookings(update, context)
        elif message_text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤" and user_id in ADMIN_IDS:
            await self.show_admin_calendar(update, context)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                "–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.application.run_polling()

if __name__ == "__main__":
    bot = ScheduleBot()
    bot.run()
